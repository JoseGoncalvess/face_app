// Mocks generated by Mockito 5.4.6 from annotations
// in face_app/test/core/repository/user_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:face_app/core/models/user.dart' as _i2;
import 'package:face_app/core/services/client/client_service_impl.dart' as _i3;
import 'package:face_app/core/services/persistence/persistence_service_impl.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

class _FakeUser_0 extends _i1.SmartFake implements _i2.User {
  _FakeUser_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ClientServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockClientServiceImpl extends _i1.Mock implements _i3.ClientServiceImpl {
  MockClientServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.User> fetchRandomUser() =>
      (super.noSuchMethod(
            Invocation.method(#fetchRandomUser, []),
            returnValue: _i4.Future<_i2.User>.value(
              _FakeUser_0(this, Invocation.method(#fetchRandomUser, [])),
            ),
          )
          as _i4.Future<_i2.User>);

  @override
  _i4.Future<bool> connectionCheck() =>
      (super.noSuchMethod(
            Invocation.method(#connectionCheck, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}

/// A class which mocks [PersistenceServiceImpl].
///
/// See the documentation for Mockito's code generation for more information.
class MockPersistenceServiceImpl extends _i1.Mock
    implements _i5.PersistenceServiceImpl {
  MockPersistenceServiceImpl() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> getRawUserList() =>
      (super.noSuchMethod(
            Invocation.method(#getRawUserList, []),
            returnValue: <String>[],
          )
          as List<String>);

  @override
  _i4.Future<void> saveRawUserList(List<String>? userJsonList) =>
      (super.noSuchMethod(
            Invocation.method(#saveRawUserList, [userJsonList]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveUser(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#saveUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteUser(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUser, [user]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  bool isUserPersisted(_i2.User? user) =>
      (super.noSuchMethod(
            Invocation.method(#isUserPersisted, [user]),
            returnValue: false,
          )
          as bool);

  @override
  _i4.Future<List<_i2.User>> getPersistedUsers() =>
      (super.noSuchMethod(
            Invocation.method(#getPersistedUsers, []),
            returnValue: _i4.Future<List<_i2.User>>.value(<_i2.User>[]),
          )
          as _i4.Future<List<_i2.User>>);

  @override
  _i4.Future<void> clearList() =>
      (super.noSuchMethod(
            Invocation.method(#clearList, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
